[
  {
    "Keyword": "Asset Management,Control inventory,Asset,CI,Asset classes,Create fixed assets,Consumables life cycle,Create pre-allocated assets,Stockrooms,Transfer order line asset tracking,Example Asset Management process",
    "heading1": "Asset Management | Overview Provides an overview of Hardware Asset Management.",
    "content1": "https://www.youtube.com/watch?v=cH4QyG3aR-E",
    "heading2": "Concept - Technology Architecture- of Asset Management In ServiceNow",
    "content2": "The ServiceNowï¿½ Asset Management application integrates the physical, technological, contractual, and financial aspects of information technology assets.\n\nAsset management business practices have a common set of goals.\nControl inventory that is purchased and used.\nReduce the cost of purchasing and managing assets.\nSelect the proper tools for managing assets.\nManage the asset life cycle from planning to disposal.\nAchieve compliance with relevant standards and regulations.\nImprove IT service to end users.\nCreate standards and processes for managing assets.\nMost successful ITAM programs involve various people and departments, including IT, finance, services, and end users.",
    "heading3": "Example Asset Management process",
    "content3": "The best method for managing assets depends on business needs and how your business is organized.\n\nAbout this task\n\nThese steps are one possible process for getting started with Asset Management.\n\nProcedure\n\nIdentify assets in your system. A key component of asset management is the initial and ongoing inventory or discovery of what you own. The ServiceNow platform provides the following options for asset discovery.\nThe separate, robust Discovery tool.\nFor organizations that want to use the discovery technologies they have deployed already, such as SMS, Tally NetCensus, LanDesk, or others, ServiceNow can support integration to those technologies via web services. Scanned data can be mapped directly into the Configuration Management Database (CMDB).\nClean up information in the CMDB. Remove information that is obsolete or invalid. Ensure that all remaining information is accurate and complete. Add any necessary information.\nCreate categories of asset models such as computers, servers, printers, and software.\nCreate asset models. Models are specific versions or various configurations of an asset, such as a MacBook Pro 17\".\nCreate individual assets, such as hardware, consumables, and software licenses. If you used a discovery tool, you may already have many assets identified accurately.\nManage assets by counting software licenses, viewing assets that are in stock, setting asset states and substates, and analyzing unallocated software.",
    "heading4": "How To Create CI Relationship in ServiceNow and CI Relationship Editor",
    "content4": "https://www.youtube.com/watch?v=krBmaMXuAuU",
    "heading5": "ServiceNow Hardware Asset Management Fundamentals",
    "content5": "Summary\nHardware Asset Management begins with a request and proceeds through the lifecycle of an asset until it is retired. It is a core discipline that interacts with nearly every other process in an IT organization. In this three?day course, attendees will learn how to automate the Asset Management lifecycle in their ServiceNow system. Topics include:\n\nInventory, track and report on assets\nManage assets in conjunction with configuration management\nManage the lifecycle of an asset from request and procurement through retirement\nEnsure data quality \nHandle contractual and financial aspects of asset management\nWhat is not included in this class:\n\nSoftware Asset Management (new class launches in Q1 2018)",
    "heading6": "Get started with Software Asset Management",
    "content6": "About this task\n\nAfter you have set up Software Asset Management, complete the basic configuration.\nNote:Microsoft Office 2013 is used in the following example.\nProcedure\n\nNavigate to Software Asset > Licensing > Software Models and create a software model for common software (see table for field descriptions)."
  },
  {
    "Keyword": "Incident Management,Create an incident,Major incident management,Incident ticketing integrations,Incident Management process,Configure Incident Management,assignment rule for incidents",
    "heading1": "#1 #ServiceNow #Incident Management | A Complete Tutorial for Admins and IT Users",
    "content1": "https://www.youtube.com/watch?v=KEkoqz6OMDQ",
    "heading2": "Concept - Technology Architecture- of Incident  Management In ServiceNow",
    "content2": "Incident Management restores normal service operation while minimizing impact to business operations and maintaining quality.\n\nServiceNow Incident Management supports the incident management process in the following ways:\nLog incidents in the instance or by sending email.\nClassify incidents by impact and urgency to prioritize work.\nAssign to appropriate groups for quick resolution.\nEscalate as necessary for further investigation.\nResolve the incident and notify the user who logged it.\nUse reports to monitor, track, and analyze service levels and improvement.\nAny user can record an incident and track it through the entire incident life cycle until service is restored and the issue is resolved.",
    "heading3": "Incident Management process",
    "content3": "ServiceNow Incident Management process follows these steps:\nIncident identification\nIncident logging\nIncident categorization\nIncident prioritization\nIncident response\nInitial diagnosis\nIncident escalation\nInvestigation and diagnosis\nResolution and recovery\nIncident closure",
    "heading4": "Installed with incident alert management",
    "content4": "Incident alert management installs the following components.\n\nActivating the Incident Alert Management plugin adds or modifies tables, user roles, script includes, and other components.\n\nDemo data is included with incident alert management.\n\nTables\nIncident alert management adds or modifies the following tables.\n\nIncident Alert Management tables",
    "heading5": "Incident Alert life cycle",
    "content5": "Incident alerts are created with a New state. They follow a process that finishes with the Closed or Cancelled state.\n\nA series of rules ensure that the alert progression is controlled and standardized.\n\nIncident Alert Stages\n \nFrom New, the state can be changed to Work in Progress, Cancelled, or Resolved.\nif the Actions Taken field is updated, the state automatically changes from New to Work in Progress.\nFrom Work in Progress, the state can be changed to Resolved or Cancelled.\nOnly the alert creator or a user with the admin role can cancel an incident alert.\nFrom Resolved, the state can be changed to Closed.",
    "heading6": "Use contacts with incident alerts",
    "content6": "Incident alert management uses contacts for notification purposes.\n\nAdministrators and incident alert administrators can:\nCreate and edit contact responsibilities.\nCreate and edit contact definitions to automatically assign contacts to alerts.\nAdd contacts manually to an incident alert.\nCreate a contact responsibility\nSet up contact definitions to identify individuals or groups that must be associated with an incident alert when it is created.\n\nCreate a contact definition\nContact definitions specify the conditions for assigning the associated contact responsibility record to incident alerts and the conditions for assigning specific users or groups to those responsibilities."
  },
  {
    "Keyword": "Set up a service catalog,Multiple service catalogs setup,\nCreate a category, Create a catalog item,edit a catalog item,Create a catalog category,Service Catalog administration,Automated Test Framework for Service Catalog,Automated Test Framework for Service Catalog in Service Portal",
    "heading1": "Service Catalog administration overview",
    "content1": "https://www.youtube.com/watch?v=SOQyJeTBmnA",
    "heading2": "Concept - Technology Architecture- of Service Catalog In ServiceNow",
    "content2": "The Service Catalog management application uses these roles to manage different aspects of the application.\n\nService Catalog terms\nExecution Plans\nDefine how something gets delivered. For example, a PDA could go through procurement / activation / and installation of the desktop software.\nExecution Plan Tasks\nPlan Tasks represent a step in the Execution Plan, are associated with a Fulfillment Group, and have an approximate duration.\nFulfillment Groups\nFulfillment Groups work execution tasks. For example, one group can activate a cell phone while a different group installs the desktop software.\nTickets\nTickets represent work done by Fulfillment Groups as part of an Execution Plan.\nService Catalog Management Roles\nRole Title [Name] Role Description\nAdministrator [admin] Can manage all aspects of the Service Catalog application, including scripting functions such as creating UI macros or business rules.\nCatalog administrator [catalog_admin] Can manage the Service Catalog application, including catalogs, categories, and items, but not including scripting functions available to administrators.\nCatalog manager [catalog_manager] Can edit and update a service catalog, as well as the categories and catalog items within the catalog. The manager can assign editors and also a different manager for the service catalog.\nCatalog editor [catalog_editor] \nCan edit and update a service catalog, as well as categories and catalog items within the catalog. The editor can assign other editors, but cannot change the catalog manager.\n\nCatalog builder editor [catalog_builder_editor] Can create and maintain items in the catalog builder using the templates that the user has access to.",
    "heading3": "Service catalog setup",
    "content3": "Service Catalog enables users with the Catalog Administrators role (catalog_admin) to set up the service catalog.\n\nService Catalog enables you to set up one or more service catalogs and provides self-service opportunities. You can organize your catalog offerings by using the ability to publish multiple catalogs targeted to specific audiences.\n\n\nSet up a service catalog\nTo set up a Service Catalog, plan the way your organization defines and maintains Service Catalog items, and how it fulfills them.\n\nSet up Platform URLs for catalog modules\nYou can direct users to a specific catalog via a URL to a module in that particular catalog.\n\nMultiple service catalogs setup\nMultiple service catalogs enable your organization to offer different sets of services to different teams within the organization, such as IT services, human resources, and facilities management.\n\nTables provided with multiple service catalogs\nAdministrators and catalog administrators must consider these points before they upgrade to multiple service catalogs.\n\nLast updated: July 26, 2018",
    "heading4": "Service Catalog Use Cases",
    "content4": "I would like to provide solutions to the most common use cases we work on in our projects. This time it is Service Catalog Use cases.Use Case 1: Auto-populate Requested For variable\nUse Case 2: Auto-populate Requested For's details\nUse Case 3: Using reference qualifiers\nUse Case 4: Using advance reference qualifier with script include\nUse Case 5: Using advance reference qualifier in a Lookup Select Box",
    "heading5": "ServiceNow Catalog Item Creation | ServiceNow Catalog Item Development | ServiceNow Development",
    "content5": "https://www.youtube.com/watch?v=19RpDrjez30",
    "heading6": "ServiceNow Developer Training | Catalog Form Design & Catalog UI Policies | ServiceNow Tutorial",
    "content6": "https://www.youtube.com/watch?v=Bgrh_E5ROL0"
  },
  {
    "Keyword": "REST API,REST API versioning,REST API headers,X-http-method-override,REST API HTTP response codes,REST API security,REST API ACLs,REST API table access, Create a REST API, REST API Integration",
    "heading1": "REST API- Web Service Rest API | Complete Demonstration with Examples | Rest API Explorer ServiceNow",
    "content1": "https://www.youtube.com/watch?v=_R12XI9vTE4",
    "heading2": "REST (REpresentational State Transfer) is a simple stateless architecture",
    "content2": "REST (REpresentational State Transfer) is a simple stateless architecture that provides standards between computer systems on the web, making it easier for them to communicate with each other.\n\nThe Now Platform provides various REST APIs, which are active by default. These APIs provide the ability to interact with various ServiceNow functionality within your application. Such functionality includes the ability to perform create, read, update, and delete (CRUD) operations on existing tables (Table API), insert data into, retrieve information from, and run transforms against a MetricBase database (MetricBase Time Series API, and many others.\n\nFor a list of available REST APIs, see REST API reference.\n\nREST URI format and available parameters\nServiceNow REST APIs follow standard REST API protocol. They also provide \"custom\" URI and query parameters to ensure backwards compatibility and provide additional functionality such as paginating long lists of results. The following sections describe the functionality behind these custom parameters, which are all optional.",
    "heading3": "Example REST client applications",
    "content3": "Several example REST client applications and source code are available to demonstrate integrations using REST web services. The example REST client applications demonstrate how to use the ServiceNow REST API with an external application, such as a NodeJS or iOS application.\n\nImportant:These applications are provided only as a demonstration of the REST functionality and are not officially supported.\nThe examples are open source and available to the community. You can use these example applications to help familiarize yourself with the REST functionality, or use them as a starting point to create your own REST client applications.\n\nUsers with the rest_api_explorer role can access the list of available client applications by navigating to System Web Services > REST > Example Client Apps.\n\nWhen viewing the list of applications, click an application to view the source code and additional documentation hosted on GitHub.\n\nDeveloper training\nOn the ServiceNowï¿½ Developer Site, you can get training for Inbound REST integrations and Outbound REST integrations.",
    "heading4": "How to use REST to insert record from external webpage in ServiceNow| ServiceNow Integration",
    "content4": "https://www.youtube.com/watch?v=f1SJ6cRpjUg",
    "heading5": "Scripted REST APIs",
    "content5": "The scripted REST API feature allows application developers to build custom web service APIs.\n\nYou can define service endpoints, query parameters, and headers for a scripted REST API, as well as scripts to manage the request and response.\n\nScripted REST APIs generally follow the REST architecture, but you can customize them to use different conventions. You define scripted REST APIs using the Scripted REST Service form found under Scripted Web Services ? Scripted REST APIs.\n\nScripted REST Service form\nScripted REST Service form\nThe following podcast offers additional information on the use of scripted REST APIs.\n\n\nScripted REST API URIs\nScripted REST API URIs have the following format:\nhttps://<instance.service-now.com>/api/<name_space>/<version>/<api_id>/<relative_path>\nIn this URI:\n<instance.service-now.com>: Path to the ServiceNow instance where users access the scripted REST API.\n<name_space>: For web services in the global scope, the name space is the value of the property glide.appcreator.company.code. For web services in a scoped application, the name space is the scope name, such as x_company_appname. For additional information on name spaces, see Application scope.\n<version>: Optional. Version of the endpoint to access if the API uses versioning, such as v1. You can access the default version of a versioned API by specifying the URI without a version number.\n<api_id>: Value of the API ID field on the Scripted REST Service form. By default this value is based on the service name.\n<relative_path>: Relative path defined for the resource in the Scripted REST Service form. Specifying a relative resource path allows you to have multiple resources using the same HTTP method, such as GET, in one web service. For example, a resource may specify the path /{id} when the web service has only one GET resource, or /user/{id} and /message/{id} when the web service has different resources for requesting user and message records.\nScripted REST API versioning\nScripted REST API URIs may include a version number, such as /api/management/v1/table/{tableName}. Version numbers identify the endpoint version that a URI accesses. By specifying a version number in your URIs, you can test and deploy changes without impacting existing integrations.\n\nDefault API version\nA version may be marked as default. Specifying a default version allows users to access that version using a scripted REST endpoint without a version number. If no version is marked as default, the latest version is used as the default.\n\nScripted REST API resources\nA scripted REST API resource is equivalent to a REST endpoint. It defines the HTTP method to execute, the processing script, and any override settings from the parent API. You can define one ore more resources per API.\n\nScripted REST API query parameters\nQuery parameters define values that requesting users can pass in a request. When creating a scripted REST API, you can specify which parameters are available and which are mandatory for each request. You can also associate a query parameter with multiple resources.\n\nAccess request parameters in scripts using the request object queryParams field.\n\nScripted REST API roles\nTo work with scripted REST APIs, you must have the web service administrator [web_service_admin] role. Users with this role can read, create, modify, and delete scripted REST APIs and web service resources.\nNote: These roles are not required to access a scripted REST API endpoint.\nRequest and response formats\nBy default, all resources in an API support the following request and response formats: application/json, application/xml, and text/xml. You can overrride the default formats at the API level. The new formats apply to all resources belonging to the API, unless an individual resource overrides the defaults.\n\nScripted REST API security\nYou can configure your scripted REST APIs with the necessary level of security. From public APIs/endpoints that don't require any security to highly secure APIs/endpoints that require user authentication with tight access control to all resources.\n\nScripted REST API access controls\nAccess control lists (ACLs) define criteria, such as the roles needed and conditions that a user must meet to access a scripted REST API or endpoint. A requesting user must satisfy at least one of the ACLs. It is not necessary to satisfy all selected ACLs. You can define a single ACL for an entire REST API or for an individual endpoint.\n\nNote: By default, scripted REST APIs contain an ACL that prohibits users with the snc_external role from making requests to the API.\nWhen defining a scripted REST API ACL, it must have the Type value REST_Endpoint.\n\nFor additional information on ACLs, see Access control list rules and Configure a scripted REST API resource to require an ACL.\n\nScripted REST API security matrix\nThere are multiple possible security configurations for scripted REST APIs. Use this table to identify the scripted REST API security configuration that best suits your needs, and the field values to implement that configuration.",
    "heading6": "Create a scripted REST API",
    "content6": "Create a scripted REST API to define web service endpoints.\n\nBefore you begin\n\nRole required: web_service_admin\nAbout this task\n\nBy default, scripted REST APIs contain an ACL that prohibits users with the snc_external role from making requests to the API.\nProcedure\n\nNavigate to System Web Services > Scripted REST APIs.\nClick New.\nEnter a Name for the service.\nThe API ID is set automatically based on the Name. You can modify the API ID if needed.\nClick Submit.\nWhat to do next\n\nAfter you create the API, configure the service as needed such as by creating resources, assigning ACLs, or specifying supported request and response formats.\nCreate a scripted REST API resource\nCreate a scripted REST API resource to define the HTTP method, the processing script, and to override settings from the parent service.\n\nDefine scripted REST API headers\nDefine scripted REST API headers to control which headers the API accepts and can respond with.\n\nDefine available query parameters\nDefine available query parameters to control what values a requesting user can pass in the request URI.\n\nAssociate query parameters to a resource\nAssociate scripted REST API query parameters to a resource.\n\nConfigure a scripted REST API to require an ACL\nRequests to scripted REST APIs respect platform ACLs, and the requesting user must meet any table ACL requirements to access instance data. Additionally, you can configure the scripted REST API to require a specific ACL.\n\nEnable versioning for a scripted REST API\nEnable versioning for a scripted REST API to provide multiple versions of the API while maintaining compatibility with existing integrations.\n\nControl request and response content type\nControls which content types are allowed in scripted REST API requests and responses.\n\nControlling maximum request size\nYou can specify the maximum file size allowed in a scripted REST API request payload."
  }
]